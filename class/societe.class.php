<?php

class ELKSociete extends Societe {

    function fetch($rowid, $ref='', $ref_ext='', $ref_int='', $idprof1='',$idprof2='',$idprof3='',$idprof4='',$idprof5='',$idprof6='', $email='', $ref_alias='') {

        $this->loaded_by_elk = 0;

        if(empty($rowid)) parent::fetch($rowid, $ref, $ref_ext, $ref_int, $idprof1,$idprof2,$idprof3,$idprof4,$idprof5,$idprof6, $email, $ref_alias);

        $obj = ELKParser::fetch($this, $rowid);

        if(false === $obj)return parent::fetch($rowid, $ref, $ref_ext, $ref_int, $idprof1,$idprof2,$idprof3,$idprof4,$idprof5,$idprof6, $email, $ref_alias);
        else {

            ELKParser::setObjectByStorage($this,$obj);
            $this->loaded_by_elk = 1;
            return 1;
        }

        return 0;
    }

    function fetch_optionals($rowid = null, $optionsArray = null) {

        if(empty($this->loaded_by_elk)) parent::fetch_optionals($rowid, $optionsArray);
        else count($this->array_options);

    }

    function check_codeclient() {
        return 0;
    }

    function check_codefournisseur() {
        return 0;
    }

    function load_previous_next_ref($filter,$fieldid,$nodbprefix=0) {
        return false;
    }

    function set_parent($id)
    {
        $res = parent::set_parent($id); // TODO: Change the autogenerated stub

        $result=$this->call_trigger('COMPANY_PARENT_MODIFY',$user);
        if ($result < 0) $error++;

        return $res;
    }
    function setPaymentMethods($id)
    {
        $res = parent::setPaymentMethods($id); // TODO: Change the autogenerated stub

        $result=$this->call_trigger('CUSTOMER_PAYMENT_METHODS_MODIFY',$user);
        if ($result < 0) $error++;

        return $res;

    }

    function setPaymentTerms($id) {
        $res = parent::setPaymentTerms($id);

        $result=$this->call_trigger('CUSTOMER_PAYMENT_TERMS_MODIFY',$user);
        if ($result < 0) $error++;

        return $res;
    }

    function update_note($note, $suffix='') {
        $res = parent::update_note($note,$suffix);

        $result=$this->call_trigger('COMPANY_NOTE_MODIFY',$user);
        if ($result < 0) $error++;

        return $res;
    }
}

class ELKClient extends ELKSociete {

    function loadCacheOfProspStatus($active=1) {
        global $db;
        $client = new Client($db);
        return $client->loadCacheOfProspStatus($active);
    }

}
