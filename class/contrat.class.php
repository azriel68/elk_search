<?php

class ELKContrat extends contrat {

    function fetch($id, $ref = '', $ref_customer = '', $ref_supplier = '')
    {
        $this->loaded_by_elk = 0;

        if(empty($id)) parent::fetch($id, $ref, $ref_customer, $ref_supplier);

        $obj = ELKParser::fetch($this, $id);

        if(false === $obj) parent::fetch($id, $ref, $ref_customer, $ref_supplier);
        else {
            ELKParser::setObjectByStorage($this,$obj);
            $this->loaded_by_elk = 1;

            return 1;
        }

        return 0;

    }

    function load_previous_next_ref($filter,$fieldid,$nodbprefix=0) {
        return false;
    }

    function setValueFrom($field, $value, $table = '', $id = null, $format = '', $id_field = '', $fuser = null, $trigkey = '', $fk_user_field = 'fk_user_modif')
    {
        $res = parent::setValueFrom($field, $value, $table, $id, $format, $id_field, $fuser, $trigkey, $fk_user_field); // TODO: Change the autogenerated stub

        if($res>0) ELKParser::storeObject($this);

        return $res;
    }

    function update_note($note, $suffix='') {
        $res = parent::update_note($note,$suffix);

        $result=$this->call_trigger('CONTRACT_NOTE_MODIFY',$user);
        if ($result < 0) $error++;

        return $res;
    }

    function validate(User $user, $force_number = '', $notrigger = 0)
    {
        $res = parent::validate($user, $force_number, $notrigger); // TODO: Change the autogenerated stub

        if($res>0) ELKParser::storeObject($this);

        return $res;
    }
}